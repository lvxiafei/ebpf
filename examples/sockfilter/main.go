//go:build linux

// Sample output:
//
// sudo ./sockfilter -i eth0
// interface: eth0 protocol: ICMP  8.8.8.8:0(src) -> 10.112.62.185:7042(dst)                                                                                                             â”‚
// interface: eth0 protocol: ICMP  8.8.8.8:0(src) -> 10.112.62.185:47409(dst)

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"net"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/internal"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	flag "github.com/spf13/pflag"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -tags "linux" -type event bpf sockfilter.c -- -I../headers

type Config struct {
	Iface string
}

func main() {

	// Config.Iface = "lo"
	flag.StringVarP(&config.Iface, "interface", "i", "lo", "interface to capture")

	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	fd, err := OpenRawSock(Config.Iface)
	if err != nil {
		fmt.Errorf("unable to open a raw socket: %s", err)
		return
	}
	defer syscall.Close(fd)

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Attach ebpf program to a socket
	link, err := link.AttachSocketFilter(fd, objs.bpfPrograms.BpfSocketHandler)
	if err != nil {
		log.Fatal(err)
	}
	defer link.Close()

	log.Printf("eBPF program loaded and attached on socket %s\n", cgroupPath)

	rd, err := ringbuf.NewReader(objs.bpfMaps.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	log.Printf("%-15s %-6s -> %-15s %-6s %-6s",
		"interface",
		"protocol",
		"src",
		"->",
		"dst",
	)
	go readLoop(rd)

	// Wait
	<-stopper
}

func readLoop(rd *ringbuf.Reader) {
	// bpfRttEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfRttEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), internal.NativeEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf("%-6d  %-6d %-15s %-6s -> %-15s %-6d",
			event.ifindex,
			event.ip_proto,
			intToIP(event.src_addr),
			event.Sport,
			intToIP(event.dst_addr),
			event.Dport,
		)
	}
}

// intToIP converts IPv4 number to net.IP
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.BigEndian.PutUint32(ip, ipNum)
	return ip
}
